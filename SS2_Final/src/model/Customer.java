package model;

import domainapp.basics.exceptions.ConstraintViolationException;
import domainapp.basics.model.meta.AttrRef;
import domainapp.basics.model.meta.DAssoc;
import domainapp.basics.model.meta.DAttr;
import domainapp.basics.model.meta.DOpt;
import domainapp.basics.model.meta.DAssoc.AssocEndType;
import domainapp.basics.model.meta.DAssoc.AssocType;
import domainapp.basics.model.meta.DAssoc.Associate;
import domainapp.basics.model.meta.DAttr.Type;
import domainapp.basics.util.Tuple;

public class Customer {
	// static variable to keep track of student id
		private static int idCounter = 0;

		// attributes of importer
		@DAttr(name = "id", id = true, type = Type.String, auto = true, length = 6, mutable = false, optional = false)
		private String id;

		@DAttr(name = "fullName", type = Type.String, length = 30, optional = false)
		private String fullName;

		@DAttr(name = "dob", type = Type.String, length = 15, optional = false)
		private String dob;

		@DAttr(name = "address", type = Type.Domain, length = 20, optional = true)
		@DAssoc(ascName = "customer-has-address", role = "customer", ascType = AssocType.One2Many, endType = AssocEndType.Many, associate = @Associate(type = Address.class, cardMin = 1, cardMax = 10))
		private Address address;

		@DAttr(name = "email", type = Type.String, length = 30, optional = false)
		private String email;

		@DOpt(type = DOpt.Type.ObjectFormConstructor)
		@DOpt(type = DOpt.Type.RequiredConstructor)
		public Customer(@AttrRef("fullName") String fullName, @AttrRef("dob") String dob,
				@AttrRef("address") Address address, @AttrRef("email") String email) {
			this(null, fullName, dob, address, email);
		
		}

		// a shared constructor that is invoked by other constructors
		@DOpt(type = DOpt.Type.DataSourceConstructor)
		public Customer(@AttrRef("id") String id, @AttrRef("fullName") String fullName, @AttrRef("dob") String dob,
				@AttrRef("address") Address address, @AttrRef("email") String email) throws ConstraintViolationException {
			// generate an id
			this.id = nextID(id);

			// assign other values
			this.fullName = fullName;
			this.dob = dob;
			this.address = address;
			this.email = email;

		}

		public String getId() {
			return id;
		}

		public String getFullName() {
			return fullName;
		}

		public void setFullName(String fullName) {
			this.fullName = fullName;
		}

		public String getDob() {
			return dob;
		}

		public void setDob(String dob) {
			this.dob = dob;
		}

		public Address getAddress() {
			return address;
		}

		public void setAddress(Address address) {
			this.address = address;
		}

		public String getEmail() {
			return email;
		}

		public void setEmail(String email) {
			this.email = email;
		}

		// override toString
		/**
		 * @effects returns <code>this.id</code>
		 */
		@Override
		public String toString() {
			return "Customer(" + id + "," + fullName + "," + dob + "," + address + "," + email + ")";
		}

		// automatically generate the next student id
		public String nextID(String id) throws ConstraintViolationException {
			if (id == null) { // generate a new id
				idCounter++;

				return "Cus" + idCounter;
			} else {
				// update id
				int num;
				try {
					num = Integer.parseInt(id.substring(3));
				} catch (RuntimeException e) {
					throw new ConstraintViolationException(ConstraintViolationException.Code.INVALID_VALUE, e,
							new Object[] { id });
				}

				if (num > idCounter) {
					idCounter = num;
				}

				return id;
			}
		}

		/**
		 * @requires minVal != null /\ maxVal != null
		 * @effects update the auto-generated value of attribute <tt>attrib</tt>,
		 *          specified for <tt>derivingValue</tt>, using <tt>minVal, maxVal</tt>
		 */
		@DOpt(type = DOpt.Type.AutoAttributeValueSynchroniser)
		public static void updateAutoGeneratedValue(DAttr attrib, Tuple derivingValue, Object minVal, Object maxVal)
				throws ConstraintViolationException {

			if (minVal != null && maxVal != null) {
				// TODO: update this for the correct attribute if there are more than one auto
				// attributes of this class

				String maxId = (String) maxVal;

				try {
					int maxIdNum = Integer.parseInt(maxId.substring(3));

					if (maxIdNum > idCounter) // extra check
						idCounter = maxIdNum;

				} catch (RuntimeException e) {
					throw new ConstraintViolationException(ConstraintViolationException.Code.INVALID_VALUE, e,
							new Object[] { maxId });
				}
			}
		}


}
