package model;

import domainapp.basics.exceptions.ConstraintViolationException;
import domainapp.basics.model.meta.AttrRef;
import domainapp.basics.model.meta.DAttr;
import domainapp.basics.model.meta.DOpt;
import domainapp.basics.model.meta.DAttr.Type;
import domainapp.basics.util.Tuple;

public class SaleOrder {
	private static int idCounter = 0;
	@DAttr(name = "id", id = true, auto = true, type = Type.String, length = 6, mutable = false, optional = false)
	private String id;

	@DAttr(name = "customer", type = Type.Domain, length = 30, optional = false)
	private Customer customer;

	@DAttr(name = "product", type = Type.String, length = 30, optional = false)
	private String product;

	@DAttr(name = "unitPrice", type = Type.Integer, length = 30, optional = false)
	private Integer unitPrice;

	@DAttr(name = "quantity", type = Type.Integer, length = 30, optional = false)
	private Integer quantity;

	@DAttr(name = "totalPrice", type = Type.Integer, auto = true, mutable = false, optional = true, serialisable = false, derivedFrom = {
			"unitPrice", "quantity" })
	private Integer totalPrice;

	@DOpt(type = DOpt.Type.DataSourceConstructor)
	public SaleOrder(String id, Customer customer, String product, Integer unitPrice, Integer quantity
			) {
		this.id = nextID(id);
		this.customer = customer;
		this.product = product;
		this.unitPrice = unitPrice;
		this.quantity = quantity;
		calTotal();
	}

	public void calTotal() {
		 totalPrice = unitPrice * quantity;
	}

	@DOpt(type = DOpt.Type.ObjectFormConstructor)
	@DOpt(type = DOpt.Type.RequiredConstructor)
	public SaleOrder(@AttrRef("customer") Customer customer, @AttrRef("product") String product,
			@AttrRef("unitPrice") Integer unitPrice, @AttrRef("quantity") Integer quantity
			) {
		this(null, customer, product, unitPrice, quantity);
	}

	public Customer getCustomer() {
		return customer;
	}

	public void setCustomer(Customer customer) {
		this.customer = customer;
	}

	public String getProduct() {
		return product;
	}

	public void setProduct(String product) {
		this.product = product;
	}

	public Integer getUnitPrice() {
		return unitPrice;
	}

	public void setUnitPrice(Integer unitPrice) {
		this.unitPrice = unitPrice;
		calTotal();
	}

	public Integer getQuantity() {
		return quantity;
	}

	public void setQuantity(Integer quantity) {
		this.quantity = quantity;
		calTotal();
	}

	public String getId() {
		return id;
	}

	public Integer getTotalPrice() {
		return totalPrice;
	}

	@Override
	public String toString() {
		return "SaleOrder(" + id + "," + customer + "," + product + "," + unitPrice + "," + quantity + "," + totalPrice
				+ ")";
	}

	public String nextID(String id) throws ConstraintViolationException {
		if (id == null) { // generate a new id
			idCounter++;

			return "SO" + idCounter;
		} else {
			// update id
			int num;
			try {
				num = Integer.parseInt(id.substring(2));
			} catch (RuntimeException e) {
				throw new ConstraintViolationException(ConstraintViolationException.Code.INVALID_VALUE, e,
						new Object[] { id });
			}

			if (num > idCounter) {
				idCounter = num;
			}

			return id;
		}
	}

	/**
	 * @requires minVal != null /\ maxVal != null
	 * @effects update the auto-generated value of attribute <tt>attrib</tt>,
	 *          specified for <tt>derivingValue</tt>, using <tt>minVal, maxVal</tt>
	 */
	@DOpt(type = DOpt.Type.AutoAttributeValueSynchroniser)
	public static void updateAutoGeneratedValue(DAttr attrib, Tuple derivingValue, Object minVal, Object maxVal)
			throws ConstraintViolationException {

		if (minVal != null && maxVal != null) {
			// TODO: update this for the correct attribute if there are more than one auto
			// attributes of this class

			String maxId = (String) maxVal;

			try {
				int maxIdNum = Integer.parseInt(maxId.substring(2));

				if (maxIdNum > idCounter) // extra check
					idCounter = maxIdNum;

			} catch (RuntimeException e) {
				throw new ConstraintViolationException(ConstraintViolationException.Code.INVALID_VALUE, e,
						new Object[] { maxId });
			}
		}
	}

}
